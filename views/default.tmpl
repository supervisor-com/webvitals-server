<style>
  body: {
    display: none;
  }

  h1 {
    font-size: 1em;
  }

  img#lcp {
    min-width: 400px;
    min-height: 267px;
    border: 1px solid;
  }
  img#cls {
    broder: 1px dashed;
  }

  #shade {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: white;
  }

  td {
    border: 1px solid black;
  }

  tr {
    vertical-align: top;
  }

  #timings td {
    padding: 1em;
  }

  table#settings {
    padding: 5px;
  }

  h2 {
    margin: 0;
    font-size: 4em;
  }
  .timing {
    margin: 0;
    font-size: 8.5em;
  }
  .cls {
    background-color: red;
  }
  .lcp {
    background-color: lightgreen;
  }

</style>

<body style="display: none">
  <div id="shade"></div>

  <h1>https://web.dev/vitals test page</h1>

  <fieldset>
    <legend>CLS</legend>
    <img alt="CLS" id="cls" src="/assets/cls.jpg?ttfb={{ .cls }}&timestamp={{ .timestamp }}"></img>
  </fieldset>

  <table>
    <tr>
      <td style="width: 480px;">
        <fieldset>
          <legend>LCP</legend>
          <img alt="LCP" id="lcp" src="/assets/robot.jpg?ttfb={{ .lcp }}&timestamp={{ .timestamp }}"></img>
        </fieldset>

        <h2>CLS</h2><p class="timing" id="clsEl"></p>
      </td>
      <td>
        <fieldset id="timings">
          <legend>timings (in ms)</legend>
          <table>
            <tr>
              <td>
                <h2>TTFB</h2><p class="timing" id="ttfbEl"></p>
              </td>
              <td colspan=2>
                <h2>DOM</h2><p class="timing" id="domEl"></p>
              </td>
            </tr>
            <tr>
              <td>
                <h2>FCP</h2><p class="timing" id="fcpEl"></p>
              </td>
              <td>
                <h2>LCP</h2><p class="timing" id="lcpEl"></p>
              </td>
            </tr>
          </table>
        </fieldset>
      </td>
    </tr>
  </table>


  <fieldset>
    <legend>Settings</legend>
    <p>
      current settings: <a href="?ttfb={{ .ttfb }}&dom={{ .dom }}&fcp={{ .fcp }}&lcp={{ .lcp }}&cls={{ .cls }}&seq={{ .seq }}">
        ?ttfb={{ .ttfb }}&dom={{ .dom }}&fcp={{ .fcp }}&lcp={{ .lcp }}&cls={{ .cls }}&seq={{ .seq }}
      </a>
    </p>

    <table id="settings">
      <tr>
        <td>TTFB</td><td>{{ .ttfb }}</td>
        <td>DOM</td><td>{{ .dom }}</td>
        <td>FCP</td><td>{{ .fcp }}</td>
        <td>LCP</td><td>{{ .lcp }}</td>
        <td>CLS</td><td>{{ .cls }}</td>
      </tr>
    </table>

    <table>
      <tr>
        <td>timestamp</td><td>{{ .timestamp }}</td>
        <td>seq</td><td>{{ .seq }}</td>
      </tr>
    </table>
  </fieldset>

  <script>
    setTimeout(()=>{
      document.body.style.display = "block";
    }, {{ .fcpMillis }});
  </script>

  <script>
    window.onbeforeunload = function() {
      shade.style.display = "block";
    }
  </script>

  <script>
    (function() {
      const poLcp = new PerformanceObserver((entryList) => {
        console.log("lcp", entryList.getEntries());
        var entries = entryList.getEntries();
        if (entries.length > 0) {
          var lastEntry = entries[entries.length - 1];
          if (lastEntry.element) {
            lastEntry.element.classList.add("lcp")
            setTimeout(()=>{
              lastEntry.element.classList.remove("lcp");
            }, 500)
          }

          lcpEl.textContent = Math.round(lastEntry.startTime);
        }
      });
      const poCls = new PerformanceObserver((entryList) => {
        console.log("cls", entryList.getEntries());
        var entries = entryList.getEntries();
        if (entries.length) {
          var lastEntry = entries[entries.length - 1];
          clsEl.textContent = lastEntry.value.toFixed(3);
          lastEntry.sources.forEach((layoutshiftAttribution) => {
            layoutshiftAttribution.node.classList.add("cls");
            setTimeout(()=>{
              layoutshiftAttribution.node.classList.remove("cls");
            }, 500)
          })
        }
      });

      poLcp.observe({type: 'largest-contentful-paint', buffered: true});
      poCls.observe({type: 'layout-shift', buffered: true});
    })();
  </script>

  <script>
    setInterval(()=> {
      var ttfb = Math.round(performance.getEntriesByType('navigation')[0]['responseEnd']);
      var dom = Math.round(performance.getEntriesByType('navigation')[0]['domContentLoadedEventEnd']);
      var fcp = Math.round(performance.getEntriesByName('first-contentful-paint')[0] && performance.getEntriesByName('first-contentful-paint')[0]['startTime'])

      ttfbEl.textContent = ttfb;
      if (dom > 0) {
        domEl.textContent = dom;
      }
      if (!isNaN(fcp)) {
        fcpEl.textContent = fcp;
      }
    }, 10)
  </script>
  <script src="/assets/empty.js?ttfb={{ .dom }}&timestamp={{ .timestamp }}"></script>
</body>
